@page "/"
@using Stocks.Core;
@using Stocks.Core.Models;
@inject IJSRuntime JSRuntime
@inject IStocksRepository stockRepository;
@inject IStockExcelWriter stockExcelWriter;

<h1>Let's see some stocks</h1>

<button class="btn btn-primary" disabled="@IsDisabled()" @onclick="Reload">Reload</button>
<button id="SwitchToUpcoming" disabled="@IsDisabled()" class="btn @SwitchToUpcomingClass" @onclick="SwitchToUpcoming">Show upcoming</button>
<button id="SwitchToGraterThan1" disabled="@IsDisabled()" class="btn @SwitchToGraterThan1Class" @onclick="SwitchToGraterThan1">Show dividend to price ratio > 1%</button>
<button id="SwitchSpecial" disabled="@IsDisabled()" class="btn @SwitchSpecialClass" @onclick="SwitchSpecial">Show with special</button>
<button id="ShowSpecialDates" disabled="@IsDisabled()" class="btn @ShowSpecialDatesClass" @onclick="ShowSpecialDates">Show extra columns</button>
<button id="DownloadFile" disabled="@IsDisabled()" class="btn btn-info @DownloadFileClass" @onclick="DownloadFile">Download Excel</button>
<br />
<label>Filter ticker: </label>
<input value="@_tickerFilter" @oninput="(EventArgs) => {SetTickerFilter(EventArgs.Value.ToString()); }" />

@if (isDownloading)
{
    <p><em>File being generated...</em></p>
}

@if (_stocks == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <StockDividendTable @bind-Stocks="_upComingstocks" @bind-VisibilitySwitch="_visibilitySwitch" @bind-ShowSpecialDates="_showSpecialDates" @bind-TickerFilter="_tickerFilter" />
    <h3 class="text-center">Today @DateTime.Today.ToShortDateString()</h3>
    <StockDividendTable @bind-Stocks="_oldStocks" @bind-VisibilitySwitch="_visibilitySwitch" @bind-ShowSpecialDates="_showSpecialDates" @bind-TickerFilter="_tickerFilter" />
}

@code{

    private IEnumerable<StockDividend> _stocks;
    private IEnumerable<StockDividend> _upComingstocks;
    private IEnumerable<StockDividend> _oldStocks;

    string _tickerFilter;
    private bool _showSpecialDates = false;

    private Dictionary<string, bool> _mySwitch;

    private bool isDownloading = false;

    private static string _infoButtonClass = "btn-info";
    private static string _dangerButtonClass = "btn-danger";

    private string GetButtonClass(bool b) => b ? _dangerButtonClass : _infoButtonClass;

    private string _visibilitySwitch = "";

    private string SwitchToUpcomingClass;
    private string SwitchToGraterThan1Class;
    private string SwitchSpecialClass;
    private string ShowSpecialDatesClass = _infoButtonClass;
    private string DownloadFileClass = _infoButtonClass;

    private void ClearButtonClass()
    {
        SwitchToUpcomingClass = _infoButtonClass;
        SwitchToGraterThan1Class = _infoButtonClass;
        SwitchSpecialClass = _infoButtonClass;
    }

    private void SwitchToUpcoming()
    {
        SwitchSelection(Common.SwitchToUpcoming, ref SwitchToUpcomingClass);
    }

    private void SwitchToGraterThan1()
    {
        SwitchSelection(Common.SwitchToGraterThan1, ref SwitchToGraterThan1Class);
    }

    private void SwitchSpecial()
    {
        SwitchSelection(Common.HasSpecial, ref SwitchSpecialClass);
    }

    private void SwitchSelection(string key, ref string className)
    {
        var deselect = _mySwitch.Where(x => x.Key != key);
        foreach (var item in deselect)
        {
            _mySwitch[item.Key] = false;
        }
        _mySwitch[key] = !_mySwitch[key];
        ClearButtonClass();
        className = GetButtonClass(_mySwitch[key]);
        _visibilitySwitch = _mySwitch[key] ? key : "";
    }

    private void ShowSpecialDates()
    {
        _showSpecialDates = !_showSpecialDates;
        ShowSpecialDatesClass = GetButtonClass(_showSpecialDates);
    }

    private async Task UpdateStocks()
    {
        _stocks = await stockRepository.GetStocks();
        _upComingstocks = FilterWhenToBuyComparedToToday(days => days >= 0);
        _oldStocks = FilterWhenToBuyComparedToToday(days => days < 0);
    }

    private IEnumerable<StockDividend> FilterWhenToBuyComparedToToday(Func<int, bool> compare)
        => _stocks.Where(s => compare((s.LatestDividendHistory.WhenToBuy - DateTime.Today).Days));

    protected override async Task OnInitializedAsync()
    {
        ClearButtonClass();
        await UpdateStocks();
        _mySwitch = new Dictionary<string, bool>
        {
            [Common.SwitchToUpcoming] = false,
            [Common.SwitchToGraterThan1] = false,
            [Common.HasSpecial] = false
        };
    }

    private void ClearFilters()
    {
        _visibilitySwitch = null;
        _tickerFilter = null;
    }

    private async Task Reload()
    {
        _stocks = null;
        ClearButtonClass();
        ClearFilters();
        await UpdateStocks();
    }

    async Task DownloadFile()
    {
        ChangeDownloadButton(true);
        await DownloadSeparated();
        ChangeDownloadButton(false);
    }

    void ChangeDownloadButton(bool value)
    {
        isDownloading = value;
        DownloadFileClass = GetButtonClass(value);
    }

    async Task DownloadSeparated()
    {
        await Task.Delay(200);
        await JSRuntime.InvokeVoidAsync(
         "downloadFromByteArray",
         new
         {
             ByteArray = await stockExcelWriter.WriteToExcelAsync(),
             FileName = "stocks.xlsx"
         });
    }

    private void SetTickerFilter(string Value)
    {
        _visibilitySwitch = null;
        _tickerFilter = Value;
    }

    private bool IsDisabled()
        => _stocks == null;
}