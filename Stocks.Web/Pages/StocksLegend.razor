@page "/stockslegend"
@inject IJSRuntime JSRuntime;
<h1>Stocks legend</h1>

<h3>Date colors, when today is @DateTime.Today.ToShortDateString()</h3>
<ul style="list-style-type:none;">
    @foreach (var item in _dateColors)
    {
        <li class="@item.Class">@item.Text</li>
    }
</ul>
<h3>Dividend to price ratio colors</h3>
<ul style="list-style-type:none;">
    @foreach (var item in _dateColors)
    {
        <li class="@item.Class">@item.Text</li>
    }
</ul>

@code{

    IEnumerable<Color> _dateColors;
    IEnumerable<Color> _dividendToPriceRacioColors;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("setTitle", $"Stock's legend"); ;
    }

    protected override async Task OnInitializedAsync()
    {
        _dateColors = new[] { 
            (2, "Between 0-3 days {0}"),
            (4, "Between 3-7 days {0}"),
            (8, "Between 7-14 days {0}"),
            (15, "More than 14 days {0}"),
            (-1, "Past {0}"),
        }
        .Select(x => Color.ToColorFromDate(x.Item1, x.Item2));

        _dateColors = new[] {
            (0.021, 0.02, 0, "More than {1}"),
            (0.016, 0.015, 0.02, "Between {1} and {2}"),
            (0.014, 0.01, 0.015, "Between {1} and {2}"),
            (0.009, 0.005, 0.01, "Between {1} and {2}"),
            (0.004, 0.005, 0, "Less than {1}"),
    }
        .Select(x => Color.ToColorFromRatio(x.Item1, x.Item2, x.Item3, x.Item4));
    }

    private record Color(string Class, string Text)
    {
        internal static Color ToColorFromDate(int numberOfDays, string textFormat)
        {
            var date = DateTime.Today.AddDays(numberOfDays);
            return new (Common.GetCssForWhenToBuy(date), string.Format(textFormat, date.ToShortDateString()));
        }
        internal static Color ToColorFromRatio(double ratio, double lowerBorder, double upperBorder, string textFormat)
        => new(Common.GetCssForDividendToPrice(ratio), string.Format(textFormat, ratio.ToPercentageDisplay(), lowerBorder.ToPercentageDisplay(), upperBorder.ToPercentageDisplay()));
    }
}