@page "/stockslegend"
@inject IJSRuntime JSRuntime;
<h1>Stocks legend</h1>

<h3>Date colors, when today is @DateTime.Today.ToShortDateString()</h3>
<ul style="list-style-type:none;">
    @foreach (var item in _dateColors)
    {
        <li class="@item.Class">@item.Text</li>
    }
</ul>
<h3>Dividend to price ratio colors</h3>
<ul style="list-style-type:none;">
    <li class="@Common.GetCssForDividendToPrice(_moreThan2)">More than @Common.ToPercentageDisplay(0.02)</li>
    <li class="@Common.GetCssForDividendToPrice(_between15and20)">Between @Common.ToPercentageDisplay(0.015) and @Common.ToPercentageDisplay(0.02)</li>
    <li class="@Common.GetCssForDividendToPrice(_between10and15)">Between @Common.ToPercentageDisplay(0.01) and @Common.ToPercentageDisplay(0.015)</li>
    <li class="@Common.GetCssForDividendToPrice(_between05and10)">Between @Common.ToPercentageDisplay(0.005) and @Common.ToPercentageDisplay(0.01)</li>
    <li class="@Common.GetCssForDividendToPrice(_lessThan05)">Less than @Common.ToPercentageDisplay(0.005) </li>
</ul>
@code
{
    double _moreThan2 = 0.021;
    double _between15and20 = 0.016;
    double _between10and15 = 0.014;
    double _between05and10 = 0.009;
    double _lessThan05 = 0.004;
}

@code{

    IEnumerable<Color> _dateColors;
    IEnumerable<Color> _dividendToPriceRacioColors;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("setTitle", $"Stock's legend"); ;
    }

    protected override async Task OnInitializedAsync()
    {
        _dateColors = new[] { 
            (2, "Between 0-3 days {0}"),
            (4, "Between 3-7 days {0}"),
            (8, "Between 7-14 days {0}"),
            (15, "More than 14 days {0}"),
            (-1, "Past {0}"),
        }
        .Select(x => Color.ToColor(x.Item1, x.Item2));
    }

    private record Color(string Class, string Text)
    {
        internal static Color ToColor(int numberOfDays, string textFormat)
        {
            var date = DateTime.Today.AddDays(numberOfDays);
            return new (Common.GetCssForWhenToBuy(date), string.Format(textFormat, date.ToShortDateString()));
        }
    }
}