@page "/dividendEventDisplay"
@using Stocks.Core.DividendDisplay;

@inject ICalendarGenerator CalendarGenerator
@inject IJSRuntime JSRuntime;

@if (_month is null)
{
    <div id="header">
        <h1 class="header">Loading...</h1>
        <h5 class="float"><span class="exDate"></span> Ex dividend</h5>
        <h5 class="float"><span class="payDate"></span> Pay date</h5>
    </div>
}
else
{
    <div id="header">
        <h1 class="header">@CalendarGenerator.Today.ToString("y")</h1>
        <h5 class="float"><span class="exDate"></span> Ex dividend</h5>
        <h5 class="float"><span class="payDate"></span> Pay date</h5>
    </div>

    <table width="100%">
        @foreach (var week in _month)
        {
            <tr>
                @foreach (var day in week)
                {
                    <div class="@day.CardCss">
                        <div class="@day.HeaderCss">
                            <h4>@day.DayOfWeek</h4><p>@day.Day</p>
                        </div>
                        <div class="@day.ContainerCss" width="100%">
                            @foreach (var item in day.DisplayDividendHistories)
                            {
                                <div style="float:left;">&nbsp;<span class="@item.Css" />&nbsp;<a style="text-align:left;" href="/stockdetail/@item.Ticker">@item.Ticker</a></div>
                            }
                        </div>
                    </div>
                }
            </tr>
        }
    </table>
}

@code {
    IEnumerable<IEnumerable<DisplayDay>> _month;

    protected override async Task OnInitializedAsync()
    {
        _month = await CalendarGenerator.GenerateMonthAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("setTitle", $"Dividend calendar"); ;
    }

    public static IEnumerable<IEnumerable<T>> Partition<T>(IEnumerable<T> values, int chunkSize)
    => values.Select((x, i) => new { Index = i, Value = x })
            .GroupBy(x => x.Index / chunkSize)
            .Select(x => x.Select(v => v.Value));
}
