@page "/dividendEventDisplay"

<h1>@DateTime.Today.ToString("y")</h1>

@if (_month != null)
{
    <table width="100%">        
    @foreach (var week in _month)
    {
        <tr>
            @foreach (var day in week)
            {
                <div class="@GetClassForCard(day)">
                    <div class="@GetClassForHeader(day)">
                        <h4>@day.DayOfWeek.ToString().Substring(0,3)</h4><p>@day.Day</p>
                    </div>
                    <div class="container">
                    </div>
                </div>
            }
        </tr>
    }
    </table>
}

@code {
    private static int CurrentMonth = DateTime.Today.Month;

    IEnumerable<IEnumerable<DateTime>> _month;

    private static string GetClassForHeader(DateTime date) => date switch
    {
        { } when date.Month != CurrentMonth => "headerOtherMonth",
        { } when IsWeekend(date) => "headerWeekend",
        _ => "header",
    };

    private static IEnumerable<DayOfWeek> _weekend = new[] { DayOfWeek.Saturday, DayOfWeek.Sunday };

    private static bool IsWeekend(DateTime date)
    => _weekend.Contains(date.DayOfWeek);

    private static string GetClassForCard(DateTime date)
    => IsWeekend(date) ? "cardWeekend" : "card";

    protected override async Task OnInitializedAsync()
    {
        var startDay = DayOfWeek.Monday;
        var dayAdjustment = 0;

        var monthsFirstDay = new DateTime(DateTime.Today.Year,DateTime.Today.Month, 1);
        var displayCalendarsFirstMonday = monthsFirstDay;

        if (displayCalendarsFirstMonday.DayOfWeek != startDay)
        {
            dayAdjustment = (int)displayCalendarsFirstMonday.DayOfWeek;
            displayCalendarsFirstMonday = displayCalendarsFirstMonday.AddDays(-dayAdjustment);
        }
        var wholeMonth = Enumerable.Range(0, DateTime.DaysInMonth(monthsFirstDay.Year, monthsFirstDay.Month) + dayAdjustment).Select(i => displayCalendarsFirstMonday.AddDays(i));

        var mondays = wholeMonth.Where(d => d.DayOfWeek == startDay);

        _month = mondays.Select(d => Enumerable.Range(0, 7).Select(i => d.AddDays(i)));
    }
}
