@using Stocks.Core.Models;

@if (_stocksToDisplay.Any())
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Ticker</th>
                <th>Price</th>
                <th>Ex-Date</th>
                <th style="@ShouldShowSpecialDates()">Record date</th>
                <th style="@ShouldShowSpecialDates()">Pay date</th>
                <th style="@ShouldShowSpecialDates()">Declaration date</th>
                <th>When to buy</th>
                <th>Dividend amount</th>
                <th>Dividend to price ratio</th>
                <th>Has special dividend</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var stock in _stocksToDisplay)
            {
                <tr>
                    <td><a href="/stockdetail/@stock.Ticker">@stock.Name</a></td>
                    <td>@stock.Ticker</td>
                    <td>@stock.Price</td>
                    <td>@stock.LatestDividendHistory.ExDate.ToYyyyMmDd()</td>
                    <td style="@ShouldShowSpecialDates()">@stock.LatestDividendHistory.RecordDate.ToYyyyMmDd()</td>
                    <td style="@ShouldShowSpecialDates()">@stock.LatestDividendHistory.PayDate.ToYyyyMmDd()</td>
                    <td style="@ShouldShowSpecialDates()">@stock.LatestDividendHistory.DeclarationDate.ToYyyyMmDd()</td>
                    <td class="@Common.GetCssForWhenToBuy(stock.LatestDividendHistory.WhenToBuy)">@stock.LatestDividendHistory.WhenToBuy.ToYyyyMmDd()</td>
                    <td>@stock.LatestDividendHistory.Amount</td>
                    <td class="@Common.GetCssForDividendToPrice(stock.DividendToPrice)">@stock.DividendToPrice.ToPercentageDisplay()</td>
                    <td>@stock.HasSpecial</td>
                </tr>
            }
        </tbody>
    </table>
}
@code {

    [Parameter]
    public IEnumerable<StockDividend> Stocks { get; set; }

    [Parameter]
    public EventCallback<IEnumerable<StockDividend>> StocksChanged { get; set; }

    [Parameter]
    public string VisibilitySwitch { get; set; }

    [Parameter]
    public EventCallback<string> VisibilitySwitchChanged { get; set; }

    [Parameter]
    public bool ShowSpecialDates { get; set; }

    [Parameter]
    public EventCallback<bool> ShowSpecialDatesChanged { get; set; }

    [Parameter]
    public string TickerFilter { get; set; }

    [Parameter]
    public EventCallback<string> TickerFilterChanged { get; set; }

    private IEnumerable<StockDividend> _stocksToDisplay;

    protected override void OnParametersSet()
    {
        var filter = new StockDividendTableStockFilter(TickerFilter, VisibilitySwitch);
        _stocksToDisplay = Stocks.Where(filter.ShouldDisplay);
    }

    private string _displayNone = "display:none";

    private string ShouldShowSpecialDates()
    => ShowSpecialDates ? "" : _displayNone;
}

