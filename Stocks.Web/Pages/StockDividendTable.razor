@using Stocks.Core.Models;

@if (Stocks.Any(s => ShouldDisplay(s) == ""))
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Short name</th>
                <th>Price</th>
                <th>Ex-Date</th>
                <th style="@ShouldShowSpecialDates()">Record date</th>
                <th style="@ShouldShowSpecialDates()">Pay date</th>
                <th style="@ShouldShowSpecialDates()">Declaration date</th>
                <th>When to buy</th>
                <th>Dividend amount</th>
                <th>Dividend to price ratio</th>
                <th>Has special dividend</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var stock in Stocks)
            {
                <tr style="@ShouldDisplay(stock)">
                    <td><a href="/stockdetail/@stock.ShortName">@stock.Name</a></td>
                    <td>@stock.ShortName</td>
                    <td>@stock.Price</td>
                    <td>@stock.LatestDividendHistory.ExDate.ToYyyyMmDd()</td>
                    <td style="@ShouldShowSpecialDates()">@stock.LatestDividendHistory.RecordDate.ToYyyyMmDd()</td>
                    <td style="@ShouldShowSpecialDates()">@stock.LatestDividendHistory.PayDate.ToYyyyMmDd()</td>
                    <td style="@ShouldShowSpecialDates()">@stock.LatestDividendHistory.DeclarationDate.ToYyyyMmDd()</td>
                    <td class="@Common.GetCssForWhenToBuy(stock.LatestDividendHistory.WhenToBuy)">@stock.LatestDividendHistory.WhenToBuy.ToYyyyMmDd()</td>
                    <td>@stock.LatestDividendHistory.Amount</td>
                    <td class="@Common.GetCssForDividendToPrice(stock.DividendToPrice)">@Common.DividendToPriceDisplay(stock.DividendToPrice)</td>
                    <td>@stock.HasSpecial</td>
                </tr>
            }
        </tbody>
    </table>
}
@code {

    [Parameter]
    public IEnumerable<StockDividend> Stocks { get; set; }

    [Parameter]
    public EventCallback<IEnumerable<StockDividend>> StocksChanged { get; set; }

    [Parameter]
    public string VisibilitySwitch { get; set; }

    [Parameter]
    public EventCallback<string> VisibilitySwitchChanged { get; set; }

    [Parameter]
    public bool ShowSpecialDates { get; set; }

    [Parameter]
    public EventCallback<bool> ShowSpecialDatesChanged { get; set; }

    [Parameter]
    public string ShortNameFilter { get; set; }

    [Parameter]
    public EventCallback<string> ShortNameFilterChanged { get; set; }

    private string _displayNone = "display:none";

    public string ShouldDisplay(StockDividend stockDividend)
    {
        var functionsToCheck = new Func<StockDividend, bool>[]
        {
            FilterByShortName,
            (sd)=>string.IsNullOrEmpty(VisibilitySwitch)
            };
        var functionsToCheck1 = new Func<StockDividend, bool>[]
        {
            IsUpcoming,
            IsRatioGraterThan1,
            HasSpecial
            };
        return functionsToCheck.All(f => f(stockDividend)) || functionsToCheck1.Any(f => f(stockDividend)) ? "" : _displayNone;
    }

    private int CalculateWhenToBuyToToday(StockDividend stockDividend)
        => (stockDividend.LatestDividendHistory.WhenToBuy - DateTime.Today).Days;

    public bool FilterByShortName(StockDividend stockDividend)
        => string.IsNullOrEmpty(ShortNameFilter)
            || (!string.IsNullOrEmpty(ShortNameFilter) && stockDividend.ShortName.ToLower().Contains(ShortNameFilter.ToLower()));

    public bool IsUpcoming(StockDividend stockDividend)
    {
        var whenToBuyToToday = CalculateWhenToBuyToToday(stockDividend);
        return VisibilitySwitch == Common.SwitchToUpcoming && (whenToBuyToToday > 0 && whenToBuyToToday <= 14);
    }

    public bool IsRatioGraterThan1(StockDividend stockDividend)
        => VisibilitySwitch == Common.SwitchToGraterThan1 && stockDividend.DividendToPrice >= 0.01;

    private bool HasSpecial(StockDividend stockDividend)
        => VisibilitySwitch == Common.HasSpecial && stockDividend.HasSpecial;

    //private bool DoesEnabledSwitchSatisfyCondition(StockDividend stockDividend, string switchName, Func<StockDividend, bool> func)
    //    => VisibilitySwitch == stockDividend && func(stockDividend);


    private string ShouldShowSpecialDates()
    => ShowSpecialDates ? "" : _displayNone;
}

